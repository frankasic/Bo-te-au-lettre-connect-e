

int pinBouton1 = 2;    // input bouton 1 - interrupteur sur la patte 2 de l'arduino ( entrée numérique )
int pinBouton2 = 3;    // input bouton 2 - interrupteur sur la patte 3 de l'arduino ( entrée numérique )
int pinBouton3 = 4;    // input bouton 3 - interrupteur sur la patte 4 de l'arduino ( entrée numérique )
int pinBouton4 = 5;    // input bouton 4 - interrupteur sur la patte 5 de l'arduino ( entrée numérique )

const int sizeCode=5; //taille du code pour un code à 4 chiffres !!! Le premier chiffre renseigne sur le nombre de LED allumés

int code[sizeCode]={3,2,1,3,4}; // le code que l'on doit taper avec les boutons est le suivant 2 1 3 4, le premier 3 dit qu'il faut que 3 leds soient allumés grâce aux potentiomètre pour que le code soit bon
int codeActuel[sizeCode]={0}; //cette variable contient à tout instant le code que l'on a rentré via les boutons

int emplacementActuelTableau=1;   //indexeur sur le tableau codeActuel

int antirebond=0;       //permet d'éviter qu'à la suite d'un appui sur plusieurs boutons simultanément ou un appui long, le code tapé soit mal interpreté.
                        //permet également d'éviter qu'un appui court sur un bouton soit compté plusieurs fois dans le programme.

int valBouton1 = 0;   //recupère la valeur du bouton poussoir 1
int valBouton2 = 0;   //recupère la valeur du bouton poussoir 2
int valBouton3 = 0;   //recupère la valeur du bouton poussoir 3
int valBouton4 = 0;   //recupère la valeur du bouton poussoir 4


void setup() {
  //Indique la vitesse de communication entre l'ordinateur et la carte Arduino.
  Serial.begin(9600);
  
  //Ci-dessous, on déclare que les pins associées aux variables pinBouton1,pinBouton2, .... déclarées précedemment, seront configurées comme des entrées.
  pinMode(pinBouton1, INPUT);  
  pinMode(pinBouton2, INPUT); 
  pinMode(pinBouton3, INPUT); 
  pinMode(pinBouton4, INPUT); }

  

/*  Cette fonction, lorsqu'elle est appelée, permet de faire un reset du code qui a été rentré précédemment.
    Celà permet, par exemple en cause de mauvaise manipulation (on a taper un mauvais code), de recomposer le code ! */
    
    void remiseZeroCode(void){
    for ( int i=0; i<sizeCode;i++){   //On passe autant de fois que nécéssaire (la taille du code), pour faire le reset ! D'ou l'interet d'une boucle pour ce faire
         codeActuel[i]=0; }
         }
// Cette fonction, permet d'afficher le code actuel qui a été saisi

void afficherCodeActuel(void){
     Serial.println("--------Affichage du code actuel-------");
     Serial.print(codeActuel[0]); //affiche le nombre de led allumé
     Serial.print(codeActuel[1]); // affiche la valeur du premier bouton tapé
     Serial.print(codeActuel[2]); // du deuxième
     Serial.print(codeActuel[3]); // etc
     Serial.println(codeActuel[4]);
}

void loop(){
  // On prend dans les différentes variables les valeurs recuillies par les capteurs
  
  valBouton1 = digitalRead(pinBouton1); //valeur bouton 1
  valBouton2 = digitalRead(pinBouton2); //valeur bouton 2
  valBouton3 = digitalRead(pinBouton3); //valeur bouton 3
  valBouton4 = digitalRead(pinBouton4); //valeur bouton 4

// Affichage des valeurs des différents boutons
  Serial.print("Valeur Bouton 1 : ");
  Serial.println (valBouton1);
  Serial.print("Valeur Bouton 2 : ");
  Serial.println (valBouton2);
  Serial.print("Valeur Bouton 3 : ");
  Serial.println (valBouton3);
  Serial.print("Valeur Bouton 4 : ");
  Serial.println (valBouton4);

//Affichage du code actuel
 Serial.println("--------Affichage du code vise-------");
 Serial.print(code[0]);
 Serial.print(code[1]);
 Serial.print(code[2]);
 Serial.print(code[3]);
 Serial.println(code[4]);
 
 Serial.println("--------Affichage du code actuel-------");
 Serial.print(codeActuel[0]);
 Serial.print(codeActuel[1]);
 Serial.print(codeActuel[2]);
 Serial.print(codeActuel[3]);
 Serial.println(codeActuel[4]);

  //============================================
  //Gestion de l'arret de l'antirebond
  // Si tout les boutons sont relachés, on peut couper l'antirebond
  
  if((valBouton1==LOW) && (valBouton2==LOW)&& (valBouton3==LOW) && (valBouton4==LOW))
  {
      antirebond=0;
  }
  
  //============================================

 //Gestion des boutons
  /*   * C'est ici que sont gérées les différentes actions associées aux boutons!
       * Quand on appui sur un bouton, son numéro est rentré dans le tableau contenant le code de l'utilisateur.
       * à cet instant, on affiche le code actuellement contenu dans le tableau, puis on active l'antirebond qui ne sera desactivé que quand il n'y aura plus d'actions sur les boutons
       * si l'antirebond est activé ( =1), on n'effectue plus d'actions sur les boutons ( condition if ! )
  */
  if (antirebond==0)
  {
    if((valBouton1==HIGH) && (valBouton2==LOW)&& (valBouton3==LOW) && (valBouton4==LOW))
    {
        Serial.println("Passage Bouton 1");
       codeActuel[emplacementActuelTableau]=1;
       emplacementActuelTableau+=1;
        afficherCodeActuel();
        antirebond=1; 
    }
    else if((valBouton1==LOW) && (valBouton2==HIGH)&& (valBouton3==LOW) && (valBouton4==LOW))
    {
       Serial.println("Passage Bouton 2");
       codeActuel[emplacementActuelTableau]=2;
       emplacementActuelTableau+=1;
       afficherCodeActuel();
         antirebond=1;
    }
    else if((valBouton1==LOW) && (valBouton2==LOW)&& (valBouton3==HIGH) && (valBouton4==LOW))
    {
       Serial.println("Passage Bouton 3");
       codeActuel[emplacementActuelTableau]=3;
       emplacementActuelTableau+=1;
       afficherCodeActuel();
       antirebond=1;
    }
    else if((valBouton1==LOW) && (valBouton2==LOW)&& (valBouton3==LOW) && (valBouton4==HIGH))
    {
       Serial.println("Passage Bouton 4");
       codeActuel[emplacementActuelTableau]=4;
       emplacementActuelTableau+=1;
       afficherCodeActuel();
         antirebond=1;
    }
  }
  
int ouverturePorte=1; //Variable mise à 1 par defaut
    
  //===============================================================
  
  //test codeTableau comparé au code que l'on doit rentrer
  for ( int i=0; i< sizeCode;i++)
  {
     if (code[i]!=codeActuel[i])
     {
       ouverturePorte=0; // si une anomalie dans le code est detectée, mise à zero de la variable, la porte restera donc fermée pour ce passage dans la fonction loop
       
     }
  }



}
