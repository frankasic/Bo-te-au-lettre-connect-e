#include <Servo.h>

void remiseZeroCode(void); // on prévient le logiciel que ces fonctions seront utilisé plus tard le code 
void ouvrirPorte(int value);
void afficherCodeActuel(void);

int ledPin1 = 6;      // on met les pattes auxquels corresepondent les différentes leds
int ledPin2 = 7;      
int ledPin3 = 8;     

int pinBouton1 = 2;    // input bouton 1 - interrupteur sur la patte 2 de l'arduino ( entrée numérique )
int pinBouton2 = 3;    // input bouton 2 - interrupteur sur la patte 3 de l'arduino ( entrée numérique )
int pinBouton3 = 4;    // input bouton 3 - interrupteur sur la patte 4 de l'arduino ( entrée numérique )
int pinBouton4 = 5;    // input bouton 4 - interrupteur sur la patte 5 de l'arduino ( entrée numérique )

const int sizeCode=5; //taille du code pour un code à 4 chiffres !!! Le premier chiffre renseigne sur le nombre de LED allumés
const int sizeCodebis=5; //Création d'un deuxième code personnel

int code[sizeCode]={3,2,4,2,4}; // le code que l'on doit taper avec les boutons est le suivant 2 1 3 4, le premier 3 dit qu'il faut que 3 leds soient allumés grâce aux potentiomètre pour que le code soit bon
int codebis[sizeCode]={1,4,4,4,4}; // code personnel
int codeActuel[sizeCode]={0}; //cette variable contient à tout instant le code que l'on a rentré via les boutons


int emplacementActuelTableau=1;   //indexeur sur le tableau codeActuel

int antirebond=0;       //permet d'éviter qu'à la suite d'un appui sur plusieurs boutons simultanément ou un appui long, le code tapé soit mal interpreté.
                        //permet également d'éviter qu'un appui court sur un bouton soit compté plusieurs fois dans le programme.
                        
int porteOuverte=0;     //Indique quand la porte est ouverte (1) ou fermée (0)
int ouverturePorte=1;   //Indique quand il faut ouvrir la porte(1), ou la fermer (0);

int valBouton1 = 0;   //recupère la valeur du bouton poussoir 1
int valBouton2 = 0;   //recupère la valeur du bouton poussoir 2
int valBouton3 = 0;   //recupère la valeur du bouton poussoir 3
int valBouton4 = 0;   //recupère la valeur du bouton poussoir 4

int ledPin_R=10; // led RGB qui clignotera en rouge si le code est faux et vert si il est bon
int ledPin_G=11;
int ledPin_B=12;

int microrupteur=13; //pin du mircrorupteur
int valeurMicrorupteur; // retourne 1 si HIGH 0 sinon

float tension=0; //on récupère la valeur du potentiomètre 
int potpin=0; // Entrée analogique sur lequel est connecté le potentiomètre


Servo servoPorte; // variable du type servo qui commandera la porte

void setup() {
  //Indique la vitesse de communication entre l'ordinateur et la carte Arduino.
  Serial.begin(9600);
  
  //Ci-dessous, on déclare que les pins associées aux variables pinBouton1,pinBouton2, .... déclarées précedemment, seront configurées comme des entrées.
  pinMode(pinBouton1, INPUT);  
  pinMode(pinBouton2, INPUT); 
  pinMode(pinBouton3, INPUT); 
  pinMode(pinBouton4, INPUT); 

  // Pins associés aux leds ...
  pinMode(ledPin1, OUTPUT);  
  pinMode(ledPin2, OUTPUT);  
  pinMode(ledPin3, OUTPUT);  

  // Initialise les deux broches led RGB
  pinMode(ledPin_B,OUTPUT);
  pinMode(ledPin_R,OUTPUT);
  pinMode(ledPin_G,OUTPUT);

  pinMode(microrupteur,INPUT);

  displayColor(0,0,0); //Led blanche, porte fermée, code pas encore tapé en entier
  
  //Pour les servomoteurs, c'est un peu particulier, il faut utiliser les fonctions contenu dans la librairie servo.h pour les initialiser.
  
  servoPorte.attach(9);  //Indique que le servomoteur numero 1 de la porte sera sur la pin 9 de l'arduino
  servoPorte.write(0);   //Indique au servomoteur sa Position initiale. ( la valeur entre "(NOMBRE)" est située entre 0 et 180°.), la fonction write() permet de donner une position au servomoteur
 
 }

void displayColor(byte r, byte g, byte b) { // fonction displayColor qui illuminera la led RGB de différentes couleurs en fonction de l'état de la porte

  // Assigne l'état des broches
  // Version cathode commune
  analogWrite(ledPin_R, r);
  analogWrite(ledPin_G, g);
  analogWrite(ledPin_B, b);}
  /*Version anode commune
  analogWrite(ledPin_R, ~r);
  analogWrite(ledPin_G, ~g);
  analogWrite(ledPin)B, ~b);}*/
  
 /* Définition d'une fonction ouvrirPorte qui prend un paramètre value.
  * Si value est égal à 1, la porte s'ouvre.
  * Si value est égal à 0, la porte se ferme.*/
  
int value;
void ouvrirPorte(int value){
  if (value==1) 
  {
     servoPorte.write(0);    //Ordonne le déplacement des servomoteurs en position ouverte
     porteOuverte=1;               //On met cette variable à 1 pour dire que la porte est ouverte !
  }
  if (value==0)
  {displayColor(0,0,0); //led blanche, porte fermée, code pas encore taper en entier
    servoPorte.write(90);  //Ordonne le déplacement des servomoteurs en position fermée 
    porteOuverte=0;            //la porte est refermée, cette variable est donc mise à zero
}}

  

/*  Cette fonction, lorsqu'elle est appelée, permet de faire un reset du code qui a été rentré précédemment.
    Celà permet, par exemple en cause de mauvaise manipulation (on a taper un mauvais code), de recomposer le code ! */
    
    void remiseZeroCode(void){
    for ( int i=0; i<sizeCode;i++){   //On passe autant de fois que nécéssaire (la taille du code), pour faire le reset ! D'ou l'interet d'une boucle pour ce faire
         codeActuel[i]=0; }
         }
// Cette fonction, permet d'afficher le code actuel qui a été saisi

void afficherCodeActuel(void){
     Serial.println("--------Affichage du code actuel-------");
     Serial.print(codeActuel[0]); //affiche le nombre de led allumé
     Serial.print(codeActuel[1]); // affiche la valeur du premier bouton tapé
     Serial.print(codeActuel[2]); // du deuxième
     Serial.print(codeActuel[3]); // etc
     Serial.println(codeActuel[4]);
}

void loop(){
  // On prend dans les différentes variables les valeurs recuillies par les capteurs
  
  valBouton1 = digitalRead(pinBouton1); //valeur bouton 1
  valBouton2 = digitalRead(pinBouton2); //valeur bouton 2
  valBouton3 = digitalRead(pinBouton3); //valeur bouton 3
  valBouton4 = digitalRead(pinBouton4); //valeur bouton 4

// Affichage des valeurs des différents boutons
  Serial.print("Valeur Bouton 1 : ");
  Serial.println (valBouton1);
  Serial.print("Valeur Bouton 2 : ");
  Serial.println (valBouton2);
  Serial.print("Valeur Bouton 3 : ");
  Serial.println (valBouton3);
  Serial.print("Valeur Bouton 4 : ");
  Serial.println (valBouton4);

//Affichage du code visé et actuel
 Serial.println("--------Affichage du code visé-------");
 Serial.print(code[0]);
 Serial.print(code[1]);
 Serial.print(code[2]);
 Serial.print(code[3]);
 Serial.println(code[4]);
 Serial.println("      ou      ");
 Serial.print(codebis[0]);
 Serial.print(codebis[1]);
 Serial.print(codebis[2]);
 Serial.print(codebis[3]);
 Serial.println(codebis[4]);

 Serial.println("--------Affichage du code actuel-------");
 Serial.print(codeActuel[0]);
 Serial.print(codeActuel[1]);
 Serial.print(codeActuel[2]);
 Serial.print(codeActuel[3]);
 Serial.println(codeActuel[4]);

  //============================================

  Serial.println("--------Affichage tension potentiomètre-------");
  tension=analogRead(0); //lecture de la tension au borne du potentiomètre
  Serial.println(tension);
  
if(digitalRead(microrupteur) ==HIGH){
  valeurMicrorupteur = 1;
  Serial.println("--------Une lettre vient d'être déposé--------");
  //fonction envoyant l'information à l'autre arduino
}else{
  valeurMicrorupteur = 0;
}

  if (tension<1000)
  {
    if (tension>250)
    {
       digitalWrite(ledPin1, HIGH); //Allumage Deuxième LED si on a assez tourné le potentiomètre
       codeActuel[0]=1;
       if (tension>500)
       {
           digitalWrite(ledPin2, HIGH);//Allumage Troisème  LED si on a assez tourné le potentiomètre
           codeActuel[0]=2;
           if (tension>750)
           {
               digitalWrite(ledPin3, HIGH); //Allumage Quatrième  LED  si on a assez tourné le potentiomètre ( quasiment en butée )
               codeActuel[0]=3;
           }
       }
    }
  }
  else //POSITION RESET, butée du potentiomètre, on effectue la remise à zéro des variables, et la fermeture du coffre et la coupure de l'alarme si besoin
  {
   remiseZeroCode();                //Appel à la fonction de remise à zero du code rentré
    digitalWrite(ledPin1, LOW);      //on coupe toutes les LED !
    digitalWrite(ledPin2, LOW);
    digitalWrite(ledPin3, LOW);
    emplacementActuelTableau=1; }    //On revient en situation initiale dans la tableau, pret à de nouveau l

   //commande fermeture Porte
    ouvrirPorte(0);                  //On appelle la fonction ouvrirPorte en lui envoyant la valeur 0 

   //Gestion extinction des LED
   
   //De même que pour l'allumage des LED, on fait divers tests sur la valeur du potentiomètre pour savoir à quel endroit il est actuelement, puis on éteint les LED si besoin.
 
  if (tension < 750)
  {
      digitalWrite(ledPin3, LOW);    
      codeActuel[0]=2;
  }
  if (tension < 500)
  {
     digitalWrite(ledPin2, LOW);
     codeActuel[0]=1;
  }
  if (tension < 250)
  {
    digitalWrite(ledPin1, LOW);
    codeActuel[0]=0;
  }


  
  //Gestion de l'arret de l'antirebond
  // Si tout les boutons sont relachés, on peut couper l'antirebond
  
  if((valBouton1==LOW) && (valBouton2==LOW)&& (valBouton3==LOW) && (valBouton4==LOW))
  {
      antirebond=0;
  }
  
  //============================================

 //Gestion des boutons
  /*   * C'est ici que sont gérées les différentes actions associées aux boutons!
       * Quand on appui sur un bouton, son numéro est rentré dans le tableau contenant le code de l'utilisateur.
       * à cet instant, on affiche le code actuellement contenu dans le tableau, puis on active l'antirebond qui ne sera desactivé que quand il n'y aura plus d'actions sur les boutons
       * si l'antirebond est activé ( =1), on n'effectue plus d'actions sur les boutons ( condition if ! )
  */
  if (antirebond==0)
  {
    if((valBouton1==HIGH) && (valBouton2==LOW)&& (valBouton3==LOW) && (valBouton4==LOW))
    {
        Serial.println("Passage Bouton 1");
       codeActuel[emplacementActuelTableau]=1;
       emplacementActuelTableau+=1;
        afficherCodeActuel();
        antirebond=1; 
    }
    else if((valBouton1==LOW) && (valBouton2==HIGH)&& (valBouton3==LOW) && (valBouton4==LOW))
    {
       Serial.println("Passage Bouton 2");
       codeActuel[emplacementActuelTableau]=2;
       emplacementActuelTableau+=1;
       afficherCodeActuel();
         antirebond=1;
    }
    else if((valBouton1==LOW) && (valBouton2==LOW)&& (valBouton3==HIGH) && (valBouton4==LOW))
    {
       Serial.println("Passage Bouton 3");
       codeActuel[emplacementActuelTableau]=3;
       emplacementActuelTableau+=1;
       afficherCodeActuel();
       antirebond=1;
    }
    else if((valBouton1==LOW) && (valBouton2==LOW)&& (valBouton3==LOW) && (valBouton4==HIGH))
    {
       Serial.println("Passage Bouton 4");
       codeActuel[emplacementActuelTableau]=4;
       emplacementActuelTableau+=1;
       afficherCodeActuel();
         antirebond=1;
    }
  }
  
int ouverturePorte=1; //Variable mise à 1 par defaut

//Une boucle qui permet de détecter si il y a une erreur dans le code, et donc de décider s'il faut ou non ouvrir ou fermer la porte du coffre

  for ( int i=0; i< sizeCode;i++)
  {
     if (code[i]!=codeActuel[i] && code[i]!=codebis[i])
     {
       ouverturePorte=0; // si une anomalie dans le code est detectée, mise à zero de la variable, la porte restera donc fermée pour ce passage dans la fonction loop
     }
  }


       // Si le code rentré par l'utilisateur ne correspond pas à un des codesc définis dans le programme, la led rgb s'allume en rouge.
       //on compare chaque composante du tableau initial à celui de l'utilisateur, pour celà on utilise une boucle for qui fait la taille du tableau.
       // La led ne s'allume que si le potentiomètre n'est pas en position reset (  tension<1000 ), et seulement si la porte est fermée ( porteOuverte==0 )
 
  if ((codeActuel[4]!=0) && (tension<1000) && (porteOuverte==0))
  {
     for ( int i=0; i< sizeCode;i++)
      {
         if (code[i]!=codeActuel[i] && code[i]!=codebis[i])
         {
            displayColor(0,255,255);
            ouverturePorte=0;
         }
      } 
  }
  if(ouverturePorte==1){
    ouvrirPorte(1);
    displayColor(255,0 , 255); //pour une couleur verte
     
    Serial.println("-------Ouverture de la porte-------");
  }
  
    
  //===============================================================
  


}
